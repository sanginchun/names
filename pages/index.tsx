import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';

import ROOT_DATA from '../data';
import { CURRENT_YEAR } from '../configs';
import { getStatByYear } from '../utils';

import Layout from '../components/Layout';
import { Segment, Button, Divider, Table } from 'semantic-ui-react';
import useUrlQuery from '../hooks/useUrlQuery';

type StatByPeriod = Record<Period, StatData>;

interface Props {
  data: StatByPeriod;
}

const PERIOD_TYPES: Period[] = ['올해', '최근 3년', '최근 5년', '최근 10년'];
const DEFAULT_PERIOD: Period = '올해';

const GENDER_TYPES: Gender[] = ['M', 'F'];
const DEFAULT_GENDER: Gender = 'M';

const IndexPage: NextPage<Props> = ({ data }) => {
  const { parsedValues, updateQuery } = useUrlQuery({
    defaultValues: { period: DEFAULT_PERIOD, gender: DEFAULT_GENDER },
  });

  const getHandleGenderChange = (gender: Gender) => () => {
    updateQuery({ key: 'gender', value: gender });
  };

  const getHandlePeriodChange = (period: Period) => () => {
    updateQuery({ key: 'period', value: period });
  };

  const period = parsedValues['period'] as Period;
  const gender = parsedValues['gender'] as Gender;

  const Genders = (
    <Button.Group basic size="small">
      {GENDER_TYPES.map((v) => (
        <Button
          key={v}
          active={v === gender}
          onClick={getHandleGenderChange(v)}
        >
          {v === 'M' ? '남자' : '여자'}
        </Button>
      ))}
    </Button.Group>
  );

  const PeriodButtons = (
    <Button.Group basic size="small">
      {PERIOD_TYPES.map((v) => (
        <Button
          key={v}
          active={v === period}
          onClick={getHandlePeriodChange(v)}
        >
          {v}
        </Button>
      ))}
    </Button.Group>
  );

  // TODO: Add Link
  const Stats = (
    <Table singleLine unstackable>
      <Table.Body>
        {data[period][gender].map((v) => (
          <Table.Row key={v.name} className="name-row">
            <Table.Cell width={2} className="name-cell">
              <Link href={`/names/${v.name}`}>
                <a>{v.rank}</a>
              </Link>
            </Table.Cell>
            <Table.Cell width={4} className="name-cell">
              <Link href={`/names/${v.name}`}>
                <a>{v.name}</a>
              </Link>
            </Table.Cell>
            <Table.Cell width={4} className="name-cell">
              <Link href={`/names/${v.name}`}>
                <a>{`${v.count.toLocaleString()} 명`}</a>
              </Link>
            </Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table>
  );

  return (
    <>
      <Head>
        {/* TODO: Add more metadata */}
        <title>최근 N년간 가장 많았던 이름</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Segment size="mini">
          {Genders}
          <Divider />
          {PeriodButtons}
        </Segment>
        {Stats}
      </Layout>
    </>
  );
};

export default IndexPage;

export async function getStaticProps() {
  const endYear = CURRENT_YEAR;

  const data: StatByPeriod = {
    올해: getStatByYear({ startYear: CURRENT_YEAR, endYear, data: ROOT_DATA }),
    '최근 3년': getStatByYear({
      startYear: CURRENT_YEAR - 2,
      endYear,
      data: ROOT_DATA,
    }),
    '최근 5년': getStatByYear({
      startYear: CURRENT_YEAR - 4,
      endYear,
      data: ROOT_DATA,
    }),
    '최근 10년': getStatByYear({
      startYear: CURRENT_YEAR - 9,
      endYear,
      data: ROOT_DATA,
    }),
  };
  return {
    props: {
      data,
    },
  };
}
