import Head from 'next/head';
import Link from 'next/link';

import Layout from '../../components/Layout';
import { Segment, Table, Button, Input, Message } from 'semantic-ui-react';

import { useState, useRef } from 'react';
import axios from 'axios';
import useUrlQuery from '../../hooks/useUrlQuery';

const GENDER_TYPES: Gender[] = ['M', 'F'];

// TODO: URL query로 검색어 처리

const SearchPage = () => {
  const [gender, setGender] = useState<Gender>('M');
  const genderRef = useRef<Gender>('M');
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [isMessageWarning, setIsMessageWarning] = useState(false);
  const [searchResult, setSearchResult] = useState<string[]>([]);

  const handleSubmitSearch = async () => {
    if (searchTerm.length === 0) {
      setMessage('검색어를 입력하세요');
      setIsMessageWarning(true);
      return;
    }

    if (searchTerm.length > 2) {
      setMessage('두 글자 이하로만 검색할 수 있습니다');
      setIsMessageWarning(true);
      return;
    }

    if (
      !searchTerm.split('').every((v) => v.match(/[가-힣|ㄱ-ㅎ]/g) !== null)
    ) {
      setMessage('한글로만 검색할 수 있습니다');
      setIsMessageWarning(true);
      return;
    }

    setIsLoading(true);
    try {
      const {
        data: { result },
      } = await axios.get<{ result: string[] }>(`/api/names`, {
        params: { gender, searchTerm },
      });

      genderRef.current = gender;
      setSearchResult(result);
    } finally {
      setMessage('');
      setIsMessageWarning(false);
      setIsLoading(false);
    }
  };

  const Genders = (
    <Button.Group basic size="small">
      {GENDER_TYPES.map((v) => (
        <Button key={v} active={v === gender} onClick={() => setGender(v)}>
          {v === 'M' ? '남자' : '여자'}
        </Button>
      ))}
    </Button.Group>
  );

  const Stats = (
    <Table singleLine unstackable>
      <Table.Body>
        {searchResult.map((name) => {
          const href = `/names/${name}?gender=${genderRef.current}`;

          return (
            <Table.Row key={name} className="link-row">
              <Table.Cell width={4} className="link-cell">
                <Link href={href}>
                  <a>{name}</a>
                </Link>
              </Table.Cell>
            </Table.Row>
          );
        })}
      </Table.Body>
    </Table>
  );

  return (
    <>
      {/* TODO: Add more metadata */}
      <Head>
        <title>이름 검색</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Segment.Group>
          <Segment>{Genders}</Segment>
          <Segment>
            <div
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  handleSubmitSearch();
                }
              }}
            >
              <Input
                fluid
                placeholder="검색어 예시: ㅇㅇ, ㅇ준, 준ㅇ"
                loading={isLoading}
                size="large"
                action={{
                  icon: 'search',
                  onClick: handleSubmitSearch,
                }}
                actionPosition="left"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </Segment>
          {message && (
            <Segment>
              <Message warning={isMessageWarning}>{message}</Message>
            </Segment>
          )}
        </Segment.Group>
        {searchResult.length > 0 ? (
          Stats
        ) : (
          <Segment>
            <Message>검색 결과가 없습니다</Message>
          </Segment>
        )}
      </Layout>
    </>
  );
};

export default SearchPage;
